protocol analyzer spicy::STUN over UDP:
	parse with zeek_spicy_stun::STUNPacket;

protocol analyzer spicy::STUN_TCP over TCP:
	parse with zeek_spicy_stun::STUNPackets;

import zeek_spicy_stun;
import Zeek_zeek_spicy_stun;
on zeek_spicy_stun::STUNPacket -> event STUN::STUNPacket($conn, $is_orig, self.M, self.C, self.trans_id);

# SOFTWARE
on zeek_spicy_stun::Attribute::DESCRIPTION -> event STUN::string_attribute($conn, $is_orig, self.method,
								self.class, self.trans_id, cast<uint16>(self.attr_type), self.DESCRIPTION);

# XOR_MAPPED_ADDRESS
on zeek_spicy_stun::Attribute::XOR_MAPPED_ADDRESS if(self.XOR_MAPPED_ADDRESS.family == zeek_spicy_stun::AddrFamily(0x01)) ->
					event STUN::mapped_address_attribute($conn, $is_orig, self.method, self.class, self.trans_id,
					cast<uint16>(self.attr_type), self.XOR_MAPPED_ADDRESS.x_port, self.XOR_MAPPED_ADDRESS.ipv4);
on zeek_spicy_stun::Attribute::XOR_MAPPED_ADDRESS if(self.XOR_MAPPED_ADDRESS.family == zeek_spicy_stun::AddrFamily(0x02)) ->
					event STUN::mapped_address_attribute($conn, $is_orig, self.method, self.class, self.trans_id,
					cast<uint16>(self.attr_type), self.XOR_MAPPED_ADDRESS.x_port, self.XOR_MAPPED_ADDRESS.ipv6);

# XOR_PEER_ADDRESS
on zeek_spicy_stun::Attribute::XOR_PEER_ADDRESS if(self.XOR_PEER_ADDRESS.family == zeek_spicy_stun::AddrFamily(0x01)) ->
					event STUN::mapped_address_attribute($conn, $is_orig, self.method, self.class, self.trans_id,
					cast<uint16>(self.attr_type), self.XOR_PEER_ADDRESS.x_port, self.XOR_PEER_ADDRESS.ipv4);
on zeek_spicy_stun::Attribute::XOR_PEER_ADDRESS if(self.XOR_PEER_ADDRESS.family == zeek_spicy_stun::AddrFamily(0x02)) ->
					event STUN::mapped_address_attribute($conn, $is_orig, self.method, self.class, self.trans_id,
					cast<uint16>(self.attr_type), self.XOR_PEER_ADDRESS.x_port, self.XOR_PEER_ADDRESS.ipv6);

# XOR_RELAYED_ADDRESS
on zeek_spicy_stun::Attribute::XOR_RELAYED_ADDRESS if(self.XOR_RELAYED_ADDRESS.family == zeek_spicy_stun::AddrFamily(0x01)) ->
					event STUN::mapped_address_attribute($conn, $is_orig, self.method, self.class, self.trans_id,
					cast<uint16>(self.attr_type), self.XOR_RELAYED_ADDRESS.x_port, self.XOR_RELAYED_ADDRESS.ipv4);
on zeek_spicy_stun::Attribute::XOR_RELAYED_ADDRESS if(self.XOR_RELAYED_ADDRESS.family == zeek_spicy_stun::AddrFamily(0x02)) ->
					event STUN::mapped_address_attribute($conn, $is_orig, self.method, self.class, self.trans_id,
					cast<uint16>(self.attr_type), self.XOR_RELAYED_ADDRESS.x_port, self.XOR_RELAYED_ADDRESS.ipv6);

# MAPPED_ADDRESS
on zeek_spicy_stun::Attribute::MAPPED_ADDRESS if(self.MAPPED_ADDRESS.family == zeek_spicy_stun::AddrFamily(0x01)) ->
					event STUN::mapped_address_attribute($conn, $is_orig, self.method, self.class, self.trans_id,
					cast<uint16>(self.attr_type), self.MAPPED_ADDRESS.x_port, self.MAPPED_ADDRESS.ipv4);
on zeek_spicy_stun::Attribute::MAPPED_ADDRESS if(self.MAPPED_ADDRESS.family == zeek_spicy_stun::AddrFamily(0x02)) ->
					event STUN::mapped_address_attribute($conn, $is_orig, self.method, self.class, self.trans_id,
					cast<uint16>(self.attr_type), self.MAPPED_ADDRESS.x_port, self.MAPPED_ADDRESS.ipv6);

# OTHER_ADDRESS
on zeek_spicy_stun::Attribute::OTHER_ADDRESS if(self.OTHER_ADDRESS.family == zeek_spicy_stun::AddrFamily(0x01)) ->
					event STUN::mapped_address_attribute($conn, $is_orig, self.method, self.class, self.trans_id,
					cast<uint16>(self.attr_type), self.OTHER_ADDRESS.x_port, self.OTHER_ADDRESS.ipv4);
on zeek_spicy_stun::Attribute::OTHER_ADDRESS if(self.OTHER_ADDRESS.family == zeek_spicy_stun::AddrFamily(0x02)) ->
					event STUN::mapped_address_attribute($conn, $is_orig, self.method, self.class, self.trans_id,
					cast<uint16>(self.attr_type), self.OTHER_ADDRESS.x_port, self.OTHER_ADDRESS.ipv6);

# USERNAME
on zeek_spicy_stun::Attribute::USERNAME -> event STUN::string_attribute($conn, $is_orig, self.method, self.class,
								self.trans_id, cast<uint16>(self.attr_type), self.USERNAME);

# MESSAGE_INTEGRITY
on zeek_spicy_stun::Attribute::HMAC_SHA1 -> event STUN::string_attribute($conn, $is_orig, self.method,
								self.class, self.trans_id, cast<uint16>(self.attr_type), self.HMAC_SHA1);

# ERROR_CODE
on zeek_spicy_stun::Attribute::ERROR_CODE -> event STUN::error_code_attribute($conn, $is_orig,
					self.method, self.class, self.trans_id, cast<uint16>(self.attr_type), self.ERROR_CODE.class,
					self.ERROR_CODE.number, self.ERROR_CODE.reason);

# UNKNOWN_ATTRIBUTES
on zeek_spicy_stun::Attribute::UNKNOWN_ATTRIBUTES -> event STUN::string_attribute($conn, $is_orig,
					self.method, self.class, self.trans_id, cast<uint16>(self.attr_type), "");

# REALM
on zeek_spicy_stun::Attribute::REALM -> event STUN::string_attribute($conn, $is_orig, self.method, self.class,
							self.trans_id, cast<uint16>(self.attr_type), self.REALM);

# NONCE
on zeek_spicy_stun::Attribute::NONCE -> event STUN::string_attribute($conn, $is_orig, self.method,
							self.class, self.trans_id, cast<uint16>(self.attr_type), self.NONCE);

# PRIORITY
on zeek_spicy_stun::Attribute::PRIORITY -> event STUN::string_attribute($conn, $is_orig, self.method,
							self.class, self.trans_id, cast<uint16>(self.attr_type), self.PRIORITY);

# USE_CANDIDATE
on zeek_spicy_stun::Attribute::USE_CANDIDATE -> event STUN::string_attribute($conn, $is_orig, self.method,
							self.class, self.trans_id, cast<uint16>(self.attr_type), "");

# ALTERNATE_SERVER
on zeek_spicy_stun::Attribute::ALTERNATE_SERVER if(self.ALTERNATE_SERVER.family == zeek_spicy_stun::AddrFamily(0x01)) ->
					event STUN::mapped_address_attribute($conn, $is_orig, self.method, self.class, self.trans_id,
					cast<uint16>(self.attr_type), self.ALTERNATE_SERVER.x_port, self.ALTERNATE_SERVER.ipv4);
on zeek_spicy_stun::Attribute::ALTERNATE_SERVER if(self.ALTERNATE_SERVER.family == zeek_spicy_stun::AddrFamily(0x02)) ->
					event STUN::mapped_address_attribute($conn, $is_orig, self.method, self.class, self.trans_id,
					cast<uint16>(self.attr_type), self.ALTERNATE_SERVER.x_port, self.ALTERNATE_SERVER.ipv6);

# FINGERPRINT
on zeek_spicy_stun::Attribute::CRC_32 -> event STUN::string_attribute($conn, $is_orig, self.method,
							self.class, self.trans_id, cast<uint16>(self.attr_type), self.CRC_32);

# ICE_CONTROLLED
on zeek_spicy_stun::Attribute::ICE_CONTROLLED -> event STUN::string_attribute($conn, $is_orig, self.method,
							self.class, self.trans_id, cast<uint16>(self.attr_type), self.ICE_CONTROLLED);

# ICE_CONTROLLING
on zeek_spicy_stun::Attribute::ICE_CONTROLLING -> event STUN::string_attribute($conn, $is_orig, self.method,
							self.class, self.trans_id, cast<uint16>(self.attr_type), self.ICE_CONTROLLING);

# Fallthrough
on zeek_spicy_stun::Attribute::attr_value -> event STUN::string_attribute($conn, $is_orig, self.method, self.class,
							self.trans_id, cast<uint16>(self.attr_type), self.attr_value);
